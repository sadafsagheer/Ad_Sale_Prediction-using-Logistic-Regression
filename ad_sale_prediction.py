# -*- coding: utf-8 -*-
"""Ad_Sale_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HCdRvJPzG2Gh2H6J-j0BSD8fqu02QwT1

#AD.SALE PREDICTION FROM EXISTING CUSTOMER-LOGISTRIC REGRESSION

###Importing Libraries
"""

import pandas as pd #useful for importing dataset
import numpy as np #useful for array

"""#CHOOSE DATASET FILE FROM LOCAL DIRECTORY

"""

from google.colab import files
uploaded = files.upload()

"""# LOAD DATASET

"""

dataset = pd.read_csv('digitalAd-dataset.csv')

"""#SUMMARISE DATASET"""

print(dataset.shape)
print(dataset.head(5))

"""#SEGREGATE DATASET INTO X(INPUT/INDEPENDENT VARIABLE)AND Y(OUTPUT/DEPEDENT VARIABLE)"""

X = dataset.iloc[:,:-1].values
X

Y = dataset.iloc[ :, -1].values
Y

"""#SPLITTING THE DATASET INTO TRAIN AND TEST"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, Y,test_size =0.25,random_state = 0)

"""#FEATURE SCALING
 we scale our data to make all the features contribute equally to the result    
 Fit_Transform-fit method is calculating the mean and variance of each of the   
 features present in our data
 Transform-Transform Method is transforming all the features using the respected
 mean and variance,
 we want our test data to be a completely new and a surprise set for our model
"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""#TRAINING

"""

from sklearn.linear_model import LogisticRegression
model = LogisticRegression(random_state = 0)
model.fit(X_train, y_train)

"""#Predicting,whether new customer with Age & Salary will Buy or Not"""

age = int(input("Enter New Customer Age: "))
sal = int(input("Enter New Customer Salary: "))
newCust = [[age,sal]]
result = model.predict(sc.transform(newCust))
print(result)
if result == 1:
  print("Customer will buy")
else:
  print("Customer won't")

"""#Prediction for all Test Data"""

y_pred = model.predict(X_test)
print(np.concatenate((y_pred.reshape(len(y_pred),1),y_test.reshape(len(y_test),1)),1))

"""#Evaluating Model -CONFUSION MATRIX"""

from sklearn.metrics import confusion_matrix,accuracy_score
cm = confusion_matrix(y_test, y_pred)

print("Confusion Matrix: ")
print(cm)

print ("Accuracy of the Model: {0}%".format(accuracy_score(y_test, y_pred)*100))